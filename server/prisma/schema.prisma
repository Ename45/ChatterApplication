// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User{
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String
  lastName    String
  profession  String
  email       String @unique
  password    String
  emailVerified DateTime?
  isVerified Boolean @default(false)
  image       String?
  coverImage  String?
  profileImage  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  myPost Feed [] @relation("UserToFeed")

  // followingIds String[] @db.ObjectId
  // hasNotification  Boolean?
  
  // comments  Comment[] @relation("UserToComment")
  // notifications Notification[]  @relation("UserToNotification")
}



model Feed{
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @db.ObjectId
  user User  @relation("UserToFeed", fields: [userId], references: [id], onDelete: Cascade)
  title       String
  content     String
  image       String?
  impression  Int @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // comments Comment[] @relation("FeedToComment")
}



model Comment{
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  body  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String  @db.ObjectId
  feedId      String  @db.ObjectId
  // user User  @relation("UserToComment", fields: [userId], references: [id], onDelete: Cascade)
  // post Feed  @relation("FeedToComment", fields: [feedId], references: [id], onDelete: Cascade)
}


model Notification{
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  body  String
  userId      String  @db.ObjectId
  createdAt   DateTime @default(now())

  // user User  @relation("UserToNotification", fields: [userId], references: [id], onDelete: Cascade)
}
